
CustomOptiboot328pb.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  00007ffc  00000490  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003fc  00007c00  00007c00  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00007ffc  00007ffc  00000492  2**0
                  CONTENTS, READONLY
  3 .bss          00000001  00800102  00800102  00000492  2**0
                  ALLOC
  4 .comment      00000030  00000000  00000000  00000494  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004c4  2**2
                  CONTENTS, READONLY
  6 .debug_aranges 00000080  00000000  00000000  00000504  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000fab  00000000  00000000  00000584  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000b68  00000000  00000000  0000152f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000646  00000000  00000000  00002097  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000000f8  00000000  00000000  000026e0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000005a1  00000000  00000000  000027d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000351  00000000  00000000  00002d79  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 000000b8  00000000  00000000  000030ca  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00007c00 <__vectors>:
    7c00:	0c 94 5a 3e 	jmp	0x7cb4	; 0x7cb4 <__ctors_end>
    7c04:	0c 94 38 3f 	jmp	0x7e70	; 0x7e70 <__bad_interrupt>
    7c08:	0c 94 38 3f 	jmp	0x7e70	; 0x7e70 <__bad_interrupt>
    7c0c:	0c 94 38 3f 	jmp	0x7e70	; 0x7e70 <__bad_interrupt>
    7c10:	0c 94 38 3f 	jmp	0x7e70	; 0x7e70 <__bad_interrupt>
    7c14:	0c 94 38 3f 	jmp	0x7e70	; 0x7e70 <__bad_interrupt>
    7c18:	0c 94 38 3f 	jmp	0x7e70	; 0x7e70 <__bad_interrupt>
    7c1c:	0c 94 38 3f 	jmp	0x7e70	; 0x7e70 <__bad_interrupt>
    7c20:	0c 94 38 3f 	jmp	0x7e70	; 0x7e70 <__bad_interrupt>
    7c24:	0c 94 38 3f 	jmp	0x7e70	; 0x7e70 <__bad_interrupt>
    7c28:	0c 94 38 3f 	jmp	0x7e70	; 0x7e70 <__bad_interrupt>
    7c2c:	0c 94 38 3f 	jmp	0x7e70	; 0x7e70 <__bad_interrupt>
    7c30:	0c 94 38 3f 	jmp	0x7e70	; 0x7e70 <__bad_interrupt>
    7c34:	0c 94 38 3f 	jmp	0x7e70	; 0x7e70 <__bad_interrupt>
    7c38:	0c 94 38 3f 	jmp	0x7e70	; 0x7e70 <__bad_interrupt>
    7c3c:	0c 94 38 3f 	jmp	0x7e70	; 0x7e70 <__bad_interrupt>
    7c40:	0c 94 38 3f 	jmp	0x7e70	; 0x7e70 <__bad_interrupt>
    7c44:	0c 94 38 3f 	jmp	0x7e70	; 0x7e70 <__bad_interrupt>
    7c48:	0c 94 38 3f 	jmp	0x7e70	; 0x7e70 <__bad_interrupt>
    7c4c:	0c 94 38 3f 	jmp	0x7e70	; 0x7e70 <__bad_interrupt>
    7c50:	0c 94 38 3f 	jmp	0x7e70	; 0x7e70 <__bad_interrupt>
    7c54:	0c 94 38 3f 	jmp	0x7e70	; 0x7e70 <__bad_interrupt>
    7c58:	0c 94 38 3f 	jmp	0x7e70	; 0x7e70 <__bad_interrupt>
    7c5c:	0c 94 38 3f 	jmp	0x7e70	; 0x7e70 <__bad_interrupt>
    7c60:	0c 94 38 3f 	jmp	0x7e70	; 0x7e70 <__bad_interrupt>
    7c64:	0c 94 38 3f 	jmp	0x7e70	; 0x7e70 <__bad_interrupt>
    7c68:	0c 94 38 3f 	jmp	0x7e70	; 0x7e70 <__bad_interrupt>
    7c6c:	0c 94 38 3f 	jmp	0x7e70	; 0x7e70 <__bad_interrupt>
    7c70:	0c 94 38 3f 	jmp	0x7e70	; 0x7e70 <__bad_interrupt>
    7c74:	0c 94 38 3f 	jmp	0x7e70	; 0x7e70 <__bad_interrupt>
    7c78:	0c 94 38 3f 	jmp	0x7e70	; 0x7e70 <__bad_interrupt>
    7c7c:	0c 94 38 3f 	jmp	0x7e70	; 0x7e70 <__bad_interrupt>
    7c80:	0c 94 38 3f 	jmp	0x7e70	; 0x7e70 <__bad_interrupt>
    7c84:	0c 94 38 3f 	jmp	0x7e70	; 0x7e70 <__bad_interrupt>
    7c88:	0c 94 38 3f 	jmp	0x7e70	; 0x7e70 <__bad_interrupt>
    7c8c:	0c 94 38 3f 	jmp	0x7e70	; 0x7e70 <__bad_interrupt>
    7c90:	0c 94 38 3f 	jmp	0x7e70	; 0x7e70 <__bad_interrupt>
    7c94:	0c 94 38 3f 	jmp	0x7e70	; 0x7e70 <__bad_interrupt>
    7c98:	0c 94 38 3f 	jmp	0x7e70	; 0x7e70 <__bad_interrupt>
    7c9c:	0c 94 38 3f 	jmp	0x7e70	; 0x7e70 <__bad_interrupt>
    7ca0:	0c 94 38 3f 	jmp	0x7e70	; 0x7e70 <__bad_interrupt>
    7ca4:	0c 94 38 3f 	jmp	0x7e70	; 0x7e70 <__bad_interrupt>
    7ca8:	0c 94 38 3f 	jmp	0x7e70	; 0x7e70 <__bad_interrupt>
    7cac:	0c 94 38 3f 	jmp	0x7e70	; 0x7e70 <__bad_interrupt>
    7cb0:	0c 94 38 3f 	jmp	0x7e70	; 0x7e70 <__bad_interrupt>

00007cb4 <__ctors_end>:
    7cb4:	11 24       	eor	r1, r1
    7cb6:	1f be       	out	0x3f, r1	; 63
    7cb8:	cf ef       	ldi	r28, 0xFF	; 255
    7cba:	d8 e0       	ldi	r29, 0x08	; 8
    7cbc:	de bf       	out	0x3e, r29	; 62
    7cbe:	cd bf       	out	0x3d, r28	; 61

00007cc0 <__do_copy_data>:
    7cc0:	11 e0       	ldi	r17, 0x01	; 1
    7cc2:	a0 e0       	ldi	r26, 0x00	; 0
    7cc4:	b1 e0       	ldi	r27, 0x01	; 1
    7cc6:	ec ef       	ldi	r30, 0xFC	; 252
    7cc8:	ff e7       	ldi	r31, 0x7F	; 127
    7cca:	02 c0       	rjmp	.+4      	; 0x7cd0 <__do_copy_data+0x10>
    7ccc:	05 90       	lpm	r0, Z+
    7cce:	0d 92       	st	X+, r0
    7cd0:	a2 30       	cpi	r26, 0x02	; 2
    7cd2:	b1 07       	cpc	r27, r17
    7cd4:	d9 f7       	brne	.-10     	; 0x7ccc <__do_copy_data+0xc>

00007cd6 <__do_clear_bss>:
    7cd6:	21 e0       	ldi	r18, 0x01	; 1
    7cd8:	a2 e0       	ldi	r26, 0x02	; 2
    7cda:	b1 e0       	ldi	r27, 0x01	; 1
    7cdc:	01 c0       	rjmp	.+2      	; 0x7ce0 <.do_clear_bss_start>

00007cde <.do_clear_bss_loop>:
    7cde:	1d 92       	st	X+, r1

00007ce0 <.do_clear_bss_start>:
    7ce0:	a3 30       	cpi	r26, 0x03	; 3
    7ce2:	b2 07       	cpc	r27, r18
    7ce4:	e1 f7       	brne	.-8      	; 0x7cde <.do_clear_bss_loop>

00007ce6 <pre_main>:
void pre_main(void) 
{
	// Allow convenient way of calling do_spm function - jump table,
	// so entry to this function will always be here, independent of compilation,
	// features etc
	asm volatile (
    7ce6:	01 c0       	rjmp	.+2      	; 0x7cea <pre_main+0x4>
    7ce8:	77 c1       	rjmp	.+750    	; 0x7fd8 <do_spm>
    7cea:	0e 94 79 3e 	call	0x7cf2	; 0x7cf2 <main>
    7cee:	0c 94 fc 3f 	jmp	0x7ff8	; 0x7ff8 <_exit>

00007cf2 <main>:

/* main program starts here */
int main(void) 
{
	// put the pin connected to the boot signal into input
	espProgModeInvoke();
    7cf2:	0e 94 6b 3f 	call	0x7ed6	; 0x7ed6 <espProgModeInvoke>
	//  SP points to RAMEND
	//  r1 contains zero
	//
	// If not, uncomment the following instructions:
	// cli();
	asm volatile ("clr __zero_reg__");
    7cf6:	11 24       	eor	r1, r1
	* and still skip bootloader if not necessary
	*
	* Code by MarkG55
	* see discusion in https://github.com/Optiboot/optiboot/issues/97
	*/
	uint8_t ch = MCUSR;
    7cf8:	84 b7       	in	r24, 0x34	; 52

	// Skip all logic and run bootloader if MCUSR is cleared (application request)
	if (ch != 0) {
    7cfa:	88 23       	and	r24, r24
    7cfc:	69 f0       	breq	.+26     	; 0x7d18 <main+0x26>
		*  2. we clear WDRF if it's set with EXTRF to avoid loops
		* One problematic scenario: broken application code sets watchdog timer
		* without clearing MCUSR before and triggers it quickly. But it's
		* recoverable by power-on with pushed reset button.
		*/
		if ((ch & (_BV(WDRF) | _BV(EXTRF))) != _BV(EXTRF)) {
    7cfe:	98 2f       	mov	r25, r24
    7d00:	9a 70       	andi	r25, 0x0A	; 10
    7d02:	92 30       	cpi	r25, 0x02	; 2
    7d04:	49 f0       	breq	.+18     	; 0x7d18 <main+0x26>
			if (ch & _BV(EXTRF)) {
    7d06:	81 ff       	sbrs	r24, 1
    7d08:	02 c0       	rjmp	.+4      	; 0x7d0e <main+0x1c>
				* It's also needed to avoid loop by broken application which could
				* prevent entering bootloader.
				* '&' operation is skipped to spare few bytes as bits in MCUSR
				* can only be cleared.
				*/
				MCUSR = ~(_BV(WDRF));
    7d0a:	97 ef       	ldi	r25, 0xF7	; 247
    7d0c:	94 bf       	out	0x34, r25	; 52
			/*
			* save the reset flags in the designated register
			* This can be saved in a main program by putting code in .init0 (which
			* executes before normal c init code) to save R2 to a global variable.
			*/
			__asm__ __volatile__ ("mov r2, %0\n" :: "r" (ch));
    7d0e:	28 2e       	mov	r2, r24

			// switch off watchdog
			watchdogConfig(WATCHDOG_OFF);
    7d10:	80 e0       	ldi	r24, 0x00	; 0
    7d12:	0e 94 65 3f 	call	0x7eca	; 0x7eca <watchdogConfig>
			// Note that appstart_vec is defined so that this works with either
			// real or virtual boot partitions.
			__asm__ __volatile__ (
    7d16:	73 c1       	rjmp	.+742    	; 0x7ffe <__data_load_end>
		LINBTR = (1 << LDISR) | (8 << LBT0);
		LINCR = _BV(LENA) | _BV(LCMD2) | _BV(LCMD1) | _BV(LCMD0);
		LINDAT=0;
	#	else
	#	ifndef SINGLESPEED
			UCSR0A = _BV(U2X0); //Double speed mode USART0
    7d18:	82 e0       	ldi	r24, 0x02	; 2
    7d1a:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
	#	endif
		UCSR0B = _BV(RXEN0) | _BV(TXEN0);
    7d1e:	88 e1       	ldi	r24, 0x18	; 24
    7d20:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
		UCSR0C = _BV(UCSZ00) | _BV(UCSZ01);
    7d24:	86 e0       	ldi	r24, 0x06	; 6
    7d26:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
		UBRR0 = (uint8_t)BAUD_SETTING;
    7d2a:	80 e1       	ldi	r24, 0x10	; 16
    7d2c:	90 e0       	ldi	r25, 0x00	; 0
    7d2e:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
    7d32:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
	#	endif // LIN_UART
	#endif // soft_uart

	// Set up watchdog to trigger after 1s
	watchdogConfig(WATCHDOG_1S);
    7d36:	8e e0       	ldi	r24, 0x0E	; 14
    7d38:	0e 94 65 3f 	call	0x7eca	; 0x7eca <watchdogConfig>
			* and we needed the space back.
			*/
			#ifdef FOURPAGEERASE
			if ((address.bytes[0] & ((SPM_PAGESIZE<<2)-1))==0) {
				#endif
				__boot_page_erase_short(address.word);
    7d3c:	93 e0       	ldi	r25, 0x03	; 3
    7d3e:	e9 2e       	mov	r14, r25

			/*
			* Copy data from the buffer into the flash write buffer.
			*/
			do {
				__boot_page_fill_short((uint16_t)(void*)addrPtr, *(mybuff.wptr++));
    7d40:	dd 24       	eor	r13, r13
    7d42:	d3 94       	inc	r13
			} while (len -= 2);

			/*
			* Actually Write the buffer to flash (and wait for it to finish.)
			*/
			__boot_page_write_short(address.word);
    7d44:	25 e0       	ldi	r18, 0x05	; 5
    7d46:	c2 2e       	mov	r12, r18
			boot_spm_busy_wait();
			#if defined(RWWSRE)
			// Reenable read access to flash
			__boot_rww_enable_short();
    7d48:	31 e1       	ldi	r19, 0x11	; 17
    7d4a:	b3 2e       	mov	r11, r19
	#endif

	/* Forever loop: exits by causing WDT reset */
	for (;;) {
		/* get character from UART */
		ch = getch();
    7d4c:	0e 94 59 3f 	call	0x7eb2	; 0x7eb2 <getch>

		if(ch == STK_GET_PARAMETER) {
    7d50:	81 34       	cpi	r24, 0x41	; 65
    7d52:	89 f4       	brne	.+34     	; 0x7d76 <main+0x84>
			unsigned char which = getch();
    7d54:	0e 94 59 3f 	call	0x7eb2	; 0x7eb2 <getch>
    7d58:	18 2f       	mov	r17, r24
			verifySpace();
    7d5a:	0e 94 d8 3f 	call	0x7fb0	; 0x7fb0 <verifySpace>
			/*
			* Send optiboot version as "SW version"
			* Note that the references to memory are optimized away.
			*/
			if (which == STK_SW_MINOR) {
    7d5e:	12 38       	cpi	r17, 0x82	; 130
    7d60:	11 f4       	brne	.+4      	; 0x7d66 <main+0x74>
				putch(OPTIBOOT_MINVER);
    7d62:	81 e0       	ldi	r24, 0x01	; 1
    7d64:	05 c0       	rjmp	.+10     	; 0x7d70 <main+0x7e>
				} else if (which == STK_SW_MAJOR) {
    7d66:	11 38       	cpi	r17, 0x81	; 129
    7d68:	11 f4       	brne	.+4      	; 0x7d6e <main+0x7c>
				putch(OPTIBOOT_MAJVER);
    7d6a:	88 e0       	ldi	r24, 0x08	; 8
    7d6c:	01 c0       	rjmp	.+2      	; 0x7d70 <main+0x7e>
				} else {
				/*
				* GET PARAMETER returns a generic 0x03 reply for
				* other parameters - enough to keep Avrdude happy
				*/
				putch(0x03);
    7d6e:	83 e0       	ldi	r24, 0x03	; 3
    7d70:	0e 94 52 3f 	call	0x7ea4	; 0x7ea4 <putch>
    7d74:	79 c0       	rjmp	.+242    	; 0x7e68 <main+0x176>
			}
		}
		else if(ch == STK_SET_DEVICE) {
    7d76:	82 34       	cpi	r24, 0x42	; 66
    7d78:	11 f4       	brne	.+4      	; 0x7d7e <main+0x8c>
			// SET DEVICE is ignored
			getNch(20);
    7d7a:	84 e1       	ldi	r24, 0x14	; 20
    7d7c:	03 c0       	rjmp	.+6      	; 0x7d84 <main+0x92>
		}
		else if(ch == STK_SET_DEVICE_EXT) {
    7d7e:	85 34       	cpi	r24, 0x45	; 69
    7d80:	21 f4       	brne	.+8      	; 0x7d8a <main+0x98>
			// SET DEVICE EXT is ignored
			getNch(5);
    7d82:	85 e0       	ldi	r24, 0x05	; 5
    7d84:	0e 94 e3 3f 	call	0x7fc6	; 0x7fc6 <getNch>
    7d88:	6f c0       	rjmp	.+222    	; 0x7e68 <main+0x176>
		}
		else if(ch == STK_LOAD_ADDRESS) {
    7d8a:	85 35       	cpi	r24, 0x55	; 85
    7d8c:	49 f4       	brne	.+18     	; 0x7da0 <main+0xae>
			// LOAD ADDRESS
			address.bytes[0] = getch();
    7d8e:	0e 94 59 3f 	call	0x7eb2	; 0x7eb2 <getch>
    7d92:	c8 2f       	mov	r28, r24
			address.bytes[1] = getch();
    7d94:	0e 94 59 3f 	call	0x7eb2	; 0x7eb2 <getch>
    7d98:	d8 2f       	mov	r29, r24
			}
			else {
				RAMPZ &= 0xFE;
			}
			#endif
			address.word *= 2; // Convert from word address to byte address
    7d9a:	cc 0f       	add	r28, r28
    7d9c:	dd 1f       	adc	r29, r29
    7d9e:	62 c0       	rjmp	.+196    	; 0x7e64 <main+0x172>
			verifySpace();
		}
		else if(ch == STK_UNIVERSAL) {
    7da0:	86 35       	cpi	r24, 0x56	; 86
    7da2:	29 f4       	brne	.+10     	; 0x7dae <main+0xbc>
				getNch(3);
				putch(0x00);
			}
			#else
			// UNIVERSAL command is ignored
			getNch(4);
    7da4:	84 e0       	ldi	r24, 0x04	; 4
    7da6:	0e 94 e3 3f 	call	0x7fc6	; 0x7fc6 <getNch>
			putch(0x00);
    7daa:	80 e0       	ldi	r24, 0x00	; 0
    7dac:	e1 cf       	rjmp	.-62     	; 0x7d70 <main+0x7e>
			#endif
		}
		/* Write memory, length is big endian and is in bytes */
		else if(ch == STK_PROG_PAGE) {
    7dae:	84 36       	cpi	r24, 0x64	; 100
    7db0:	09 f0       	breq	.+2      	; 0x7db4 <main+0xc2>
    7db2:	32 c0       	rjmp	.+100    	; 0x7e18 <main+0x126>
			// PROGRAM PAGE - we support flash programming only, not EEPROM
			uint8_t desttype;
			uint8_t *bufPtr;
			pagelen_t savelength;

			GETLENGTH(length);
    7db4:	0e 94 59 3f 	call	0x7eb2	; 0x7eb2 <getch>
    7db8:	0e 94 59 3f 	call	0x7eb2	; 0x7eb2 <getch>
    7dbc:	f8 2e       	mov	r15, r24
			savelength = length;
			desttype = getch();
    7dbe:	0e 94 59 3f 	call	0x7eb2	; 0x7eb2 <getch>
    7dc2:	a8 2e       	mov	r10, r24
    7dc4:	00 e0       	ldi	r16, 0x00	; 0
    7dc6:	11 e0       	ldi	r17, 0x01	; 1

			// read a page worth of contents
			bufPtr = buff.bptr;
			do *bufPtr++ = getch();
    7dc8:	0e 94 59 3f 	call	0x7eb2	; 0x7eb2 <getch>
    7dcc:	f8 01       	movw	r30, r16
    7dce:	81 93       	st	Z+, r24
    7dd0:	8f 01       	movw	r16, r30
			while (--length);
    7dd2:	fe 12       	cpse	r15, r30
    7dd4:	f9 cf       	rjmp	.-14     	; 0x7dc8 <main+0xd6>

			// Read command terminator, start reply
			verifySpace();
    7dd6:	0e 94 d8 3f 	call	0x7fb0	; 0x7fb0 <verifySpace>
* void writebuffer(memtype, buffer, address, length)
*/
static inline void writebuffer(int8_t memtype, addr16_t mybuff,
addr16_t address, pagelen_t len)
{
	switch (memtype) {
    7dda:	f5 e4       	ldi	r31, 0x45	; 69
    7ddc:	af 12       	cpse	r10, r31
    7dde:	01 c0       	rjmp	.+2      	; 0x7de2 <main+0xf0>
    7de0:	ff cf       	rjmp	.-2      	; 0x7de0 <main+0xee>
			* and we needed the space back.
			*/
			#ifdef FOURPAGEERASE
			if ((address.bytes[0] & ((SPM_PAGESIZE<<2)-1))==0) {
				#endif
				__boot_page_erase_short(address.word);
    7de2:	fe 01       	movw	r30, r28
    7de4:	e7 be       	out	0x37, r14	; 55
    7de6:	e8 95       	spm
				boot_spm_busy_wait();
    7de8:	07 b6       	in	r0, 0x37	; 55
    7dea:	00 fc       	sbrc	r0, 0
    7dec:	fd cf       	rjmp	.-6      	; 0x7de8 <main+0xf6>
    7dee:	a0 e0       	ldi	r26, 0x00	; 0
    7df0:	b1 e0       	ldi	r27, 0x01	; 1
    7df2:	fe 01       	movw	r30, r28

			/*
			* Copy data from the buffer into the flash write buffer.
			*/
			do {
				__boot_page_fill_short((uint16_t)(void*)addrPtr, *(mybuff.wptr++));
    7df4:	8d 91       	ld	r24, X+
    7df6:	9d 91       	ld	r25, X+
    7df8:	0c 01       	movw	r0, r24
    7dfa:	d7 be       	out	0x37, r13	; 55
    7dfc:	e8 95       	spm
    7dfe:	11 24       	eor	r1, r1
    7e00:	32 96       	adiw	r30, 0x02	; 2
				addrPtr += 2;
			} while (len -= 2);
    7e02:	fa 12       	cpse	r15, r26
    7e04:	f7 cf       	rjmp	.-18     	; 0x7df4 <main+0x102>

			/*
			* Actually Write the buffer to flash (and wait for it to finish.)
			*/
			__boot_page_write_short(address.word);
    7e06:	fe 01       	movw	r30, r28
    7e08:	c7 be       	out	0x37, r12	; 55
    7e0a:	e8 95       	spm
			boot_spm_busy_wait();
    7e0c:	07 b6       	in	r0, 0x37	; 55
    7e0e:	00 fc       	sbrc	r0, 0
    7e10:	fd cf       	rjmp	.-6      	; 0x7e0c <main+0x11a>
			#if defined(RWWSRE)
			// Reenable read access to flash
			__boot_rww_enable_short();
    7e12:	b7 be       	out	0x37, r11	; 55
    7e14:	e8 95       	spm
    7e16:	28 c0       	rjmp	.+80     	; 0x7e68 <main+0x176>
	writebuffer(desttype, buff, address, savelength);


}
/* Read memory block mode, length is big endian.  */
else if(ch == STK_READ_PAGE) {
    7e18:	84 37       	cpi	r24, 0x74	; 116
    7e1a:	99 f4       	brne	.+38     	; 0x7e42 <main+0x150>
	uint8_t desttype;
	GETLENGTH(length);
    7e1c:	0e 94 59 3f 	call	0x7eb2	; 0x7eb2 <getch>
    7e20:	0e 94 59 3f 	call	0x7eb2	; 0x7eb2 <getch>
    7e24:	f8 2e       	mov	r15, r24

	desttype = getch();
    7e26:	0e 94 59 3f 	call	0x7eb2	; 0x7eb2 <getch>

	verifySpace();
    7e2a:	0e 94 d8 3f 	call	0x7fb0	; 0x7fb0 <verifySpace>
    7e2e:	8e 01       	movw	r16, r28
			//      while (--length);
			// read a Flash and increment the address (may increment RAMPZ)
			__asm__ ("elpm %0,Z+\n" : "=r" (ch), "=z" (address.bptr): "1" (address));
			#else
			// read a Flash byte and increment the address
			__asm__ ("lpm %0,Z+\n" : "=r" (ch), "=z" (address.bptr): "1" (address));
    7e30:	f8 01       	movw	r30, r16
    7e32:	85 91       	lpm	r24, Z+
    7e34:	8f 01       	movw	r16, r30
			#endif
			putch(ch);
    7e36:	0e 94 52 3f 	call	0x7ea4	; 0x7ea4 <putch>
		} while (--length);
    7e3a:	fa 94       	dec	r15
    7e3c:	f1 10       	cpse	r15, r1
    7e3e:	f8 cf       	rjmp	.-16     	; 0x7e30 <main+0x13e>
    7e40:	13 c0       	rjmp	.+38     	; 0x7e68 <main+0x176>

	read_mem(desttype, address, length);
}

/* Get device signature bytes  */
else if(ch == STK_READ_SIGN) {
    7e42:	85 37       	cpi	r24, 0x75	; 117
    7e44:	51 f4       	brne	.+20     	; 0x7e5a <main+0x168>
	// READ SIGN - return what Avrdude wants to hear
	verifySpace();
    7e46:	0e 94 d8 3f 	call	0x7fb0	; 0x7fb0 <verifySpace>
	putch(SIGNATURE_0);
    7e4a:	8e e1       	ldi	r24, 0x1E	; 30
    7e4c:	0e 94 52 3f 	call	0x7ea4	; 0x7ea4 <putch>
	putch(SIGNATURE_1);
    7e50:	85 e9       	ldi	r24, 0x95	; 149
    7e52:	0e 94 52 3f 	call	0x7ea4	; 0x7ea4 <putch>
	putch(SIGNATURE_2);
    7e56:	86 e1       	ldi	r24, 0x16	; 22
    7e58:	8b cf       	rjmp	.-234    	; 0x7d70 <main+0x7e>
}
else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
    7e5a:	81 35       	cpi	r24, 0x51	; 81
    7e5c:	19 f4       	brne	.+6      	; 0x7e64 <main+0x172>
	// Adaboot no-wait mod
	watchdogConfig(WATCHDOG_16MS);
    7e5e:	88 e0       	ldi	r24, 0x08	; 8
    7e60:	0e 94 65 3f 	call	0x7eca	; 0x7eca <watchdogConfig>
	verifySpace();
}
else {
	// This covers the response to commands like STK_ENTER_PROGMODE
	verifySpace();
    7e64:	0e 94 d8 3f 	call	0x7fb0	; 0x7fb0 <verifySpace>
}
putch(STK_OK);
    7e68:	80 e1       	ldi	r24, 0x10	; 16
    7e6a:	0e 94 52 3f 	call	0x7ea4	; 0x7ea4 <putch>
}
    7e6e:	6e cf       	rjmp	.-292    	; 0x7d4c <main+0x5a>

00007e70 <__bad_interrupt>:
    7e70:	0c 94 00 3e 	jmp	0x7c00	; 0x7c00 <__vectors>

00007e74 <delay5ms>:
	);
}
*/
void delay5ms(void)
{
	__asm__ __volatile__ (
    7e74:	29 e5       	ldi	r18, 0x59	; 89
    7e76:	35 ee       	ldi	r19, 0xE5	; 229

00007e78 <L5>:
    7e78:	3a 95       	dec	r19
    7e7a:	f1 f7       	brne	.-4      	; 0x7e78 <L5>
    7e7c:	2a 95       	dec	r18
    7e7e:	e1 f7       	brne	.-8      	; 0x7e78 <L5>
    7e80:	08 95       	ret

00007e82 <delay100ms>:
}
*/

void delay100ms()
{
	__asm__ __volatile__ (
    7e82:	29 e0       	ldi	r18, 0x09	; 9
    7e84:	3e ee       	ldi	r19, 0xEE	; 238
    7e86:	40 eb       	ldi	r20, 0xB0	; 176

00007e88 <L4>:
    7e88:	4a 95       	dec	r20
    7e8a:	f1 f7       	brne	.-4      	; 0x7e88 <L4>
    7e8c:	3a 95       	dec	r19
    7e8e:	e1 f7       	brne	.-8      	; 0x7e88 <L4>
    7e90:	2a 95       	dec	r18
    7e92:	d1 f7       	brne	.-12     	; 0x7e88 <L4>
    7e94:	08 95       	ret

00007e96 <delay300us>:
}


void delay300us(void)
{
	__asm__ __volatile__ (
    7e96:	26 e0       	ldi	r18, 0x06	; 6
    7e98:	31 ed       	ldi	r19, 0xD1	; 209

00007e9a <L7>:
    7e9a:	3a 95       	dec	r19
    7e9c:	f1 f7       	brne	.-4      	; 0x7e9a <L7>
    7e9e:	2a 95       	dec	r18
    7ea0:	e1 f7       	brne	.-8      	; 0x7e9a <L7>
    7ea2:	08 95       	ret

00007ea4 <putch>:
}
}

void putch(char ch) {
	#ifndef SOFT_UART
	while (!(UCSR0A & _BV(UDRE0)));
    7ea4:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    7ea8:	95 ff       	sbrs	r25, 5
    7eaa:	fc cf       	rjmp	.-8      	; 0x7ea4 <putch>
	UDR0 = ch;
    7eac:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
    7eb0:	08 95       	ret

00007eb2 <getch>:
	[uartBit] "I" (UART_RX_BIT)
	:
	"r25"
	);
	#else
	while(!(UCSR0A & _BV(RXC0)))
    7eb2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    7eb6:	87 ff       	sbrs	r24, 7
    7eb8:	fc cf       	rjmp	.-8      	; 0x7eb2 <getch>
	;
	if (!(UCSR0A & _BV(FE0))) {
    7eba:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
    7ebe:	84 fd       	sbrc	r24, 4
    7ec0:	01 c0       	rjmp	.+2      	; 0x7ec4 <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
	__asm__ __volatile__ (
    7ec2:	a8 95       	wdr
		* don't care that an invalid char is returned...)
		*/
		watchdogReset();
	}
	
	ch = UDR0;
    7ec4:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
	#ifdef LED_DATA_FLASH
	LED_PIN |= _BV(LED);
	#endif

	return ch;
}
    7ec8:	08 95       	ret

00007eca <watchdogConfig>:

void watchdogConfig(uint8_t x) 
{
	#ifdef WDCE //does it have a Watchdog Change Enable?
	#ifdef WDTCSR
	WDTCSR = _BV(WDCE) | _BV(WDE);
    7eca:	e0 e6       	ldi	r30, 0x60	; 96
    7ecc:	f0 e0       	ldi	r31, 0x00	; 0
    7ece:	98 e1       	ldi	r25, 0x18	; 24
    7ed0:	90 83       	st	Z, r25
	#else //then it must be one of those newfangled ones that use CCP
	CCP=0xD8; //so write this magic number to CCP
	#endif

	#ifdef WDTCSR
	WDTCSR = x;
    7ed2:	80 83       	st	Z, r24
    7ed4:	08 95       	ret

00007ed6 <espProgModeInvoke>:
* This routine goes through the process of putting the ESP8285 into 
* programming mode. 
* It emulates the hardware behavior of ESP development kits
*/
void espProgModeInvoke(void)
{
    7ed6:	cf 93       	push	r28
    7ed8:	df 93       	push	r29
	// wait a bit of time before check the status of the boot pin
	//delay5ms();
	// if the boot button has been pressed...
	if(EspCheckBootStat() == 0 && EspCheckEnStat() != 0){
    7eda:	63 99       	sbic	0x0c, 3	; 12
    7edc:	66 c0       	rjmp	.+204    	; 0x7faa <espProgModeInvoke+0xd4>
    7ede:	61 9b       	sbis	0x0c, 1	; 12
    7ee0:	64 c0       	rjmp	.+200    	; 0x7faa <espProgModeInvoke+0xd4>
		// force low level on the boot signal of the ESP		
		EspEnLow();
    7ee2:	69 9a       	sbi	0x0d, 1	; 13
    7ee4:	71 98       	cbi	0x0e, 1	; 14
		// stop the 328PB watchdog to prevent reset events during the ESP
		// programming task
		watchdogConfig(WATCHDOG_OFF);
    7ee6:	80 e0       	ldi	r24, 0x00	; 0
    7ee8:	0e 94 65 3f 	call	0x7eca	; 0x7eca <watchdogConfig>
		//delay300us();
		EspBootLow();
    7eec:	6b 9a       	sbi	0x0d, 3	; 13
    7eee:	73 98       	cbi	0x0e, 3	; 14
		delay100ms();
    7ef0:	0e 94 41 3f 	call	0x7e82	; 0x7e82 <delay100ms>
		//delay5ms();
		delay5ms();
    7ef4:	0e 94 3a 3f 	call	0x7e74	; 0x7e74 <delay5ms>
		//delay5ms();
		EspEnHigh();
    7ef8:	69 98       	cbi	0x0d, 1	; 13

		//LED_DDR |= _BV(LED);
		//DDRD &= ~(1<<PORTD0);	// set serial RX pin into input to monitor the programming status
		
		DDRD &= ~(1<<PORTD1);
    7efa:	51 98       	cbi	0x0a, 1	; 10
		while(PIND & (1 << PIND0));
    7efc:	48 99       	sbic	0x09, 0	; 9
    7efe:	fe cf       	rjmp	.-4      	; 0x7efc <espProgModeInvoke+0x26>
		firstEdge = true;
    7f00:	81 e0       	ldi	r24, 0x01	; 1
    7f02:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
				}
				delay5ms();
			}
			else {
				//delay5ms();
				countOut = NUMBER_OF_RX_EDGES;
    7f06:	c8 ee       	ldi	r28, 0xE8	; 232
    7f08:	d3 e0       	ldi	r29, 0x03	; 3
		while(PIND & (1 << PIND0));
		firstEdge = true;

		while(1) {
			// rx pin is low -> maybe there are data on the line
			if(PIND & (1 << PIND0)) {
    7f0a:	48 9b       	sbis	0x09, 0	; 9
    7f0c:	47 c0       	rjmp	.+142    	; 0x7f9c <espProgModeInvoke+0xc6>
				//delay5ms();
				if(firstEdge == true){
    7f0e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_end>
    7f12:	88 23       	and	r24, r24
    7f14:	09 f4       	brne	.+2      	; 0x7f18 <espProgModeInvoke+0x42>
    7f16:	46 c0       	rjmp	.+140    	; 0x7fa4 <espProgModeInvoke+0xce>
					if(countOut > 0){
    7f18:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    7f1c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    7f20:	00 97       	sbiw	r24, 0x00	; 0
    7f22:	31 f0       	breq	.+12     	; 0x7f30 <espProgModeInvoke+0x5a>
						countOut--;
    7f24:	01 97       	sbiw	r24, 0x01	; 1
    7f26:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
    7f2a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
    7f2e:	3a c0       	rjmp	.+116    	; 0x7fa4 <espProgModeInvoke+0xce>
					}
					else {
						countOut = NUMBER_OF_RX_EDGES;
    7f30:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <__data_start+0x1>
    7f34:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
						while(countOut-- >0)
    7f38:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    7f3c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    7f40:	9c 01       	movw	r18, r24
    7f42:	21 50       	subi	r18, 0x01	; 1
    7f44:	31 09       	sbc	r19, r1
    7f46:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__data_start+0x1>
    7f4a:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
    7f4e:	89 2b       	or	r24, r25
    7f50:	19 f0       	breq	.+6      	; 0x7f58 <espProgModeInvoke+0x82>
							delay5ms();
    7f52:	0e 94 3a 3f 	call	0x7e74	; 0x7e74 <delay5ms>
    7f56:	f0 cf       	rjmp	.-32     	; 0x7f38 <espProgModeInvoke+0x62>
						
						EspBootHigh();
    7f58:	6b 98       	cbi	0x0d, 3	; 13
						delay300us();
    7f5a:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <delay300us>
						EspEnLow();
    7f5e:	69 9a       	sbi	0x0d, 1	; 13
    7f60:	71 98       	cbi	0x0e, 1	; 14
						delay100ms();
    7f62:	0e 94 41 3f 	call	0x7e82	; 0x7e82 <delay100ms>
						
						DDRD |= (1<<PORTD1);
    7f66:	51 9a       	sbi	0x0a, 1	; 10
						PORTD |= (1<<PORTD1);
    7f68:	59 9a       	sbi	0x0b, 1	; 11
						
						EspEnHigh();
    7f6a:	69 98       	cbi	0x0d, 1	; 13
						countOut = NUMBER_OF_RX_EDGES;
    7f6c:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <__data_start+0x1>
    7f70:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
						while(countOut-- >0)
    7f74:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
    7f78:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
    7f7c:	9c 01       	movw	r18, r24
    7f7e:	21 50       	subi	r18, 0x01	; 1
    7f80:	31 09       	sbc	r19, r1
    7f82:	30 93 01 01 	sts	0x0101, r19	; 0x800101 <__data_start+0x1>
    7f86:	20 93 00 01 	sts	0x0100, r18	; 0x800100 <__data_start>
    7f8a:	89 2b       	or	r24, r25
    7f8c:	19 f0       	breq	.+6      	; 0x7f94 <espProgModeInvoke+0xbe>
							delay300us();
    7f8e:	0e 94 4b 3f 	call	0x7e96	; 0x7e96 <delay300us>
    7f92:	f0 cf       	rjmp	.-32     	; 0x7f74 <espProgModeInvoke+0x9e>
						
						watchdogConfig(WATCHDOG_250MS);
    7f94:	8c e0       	ldi	r24, 0x0C	; 12
    7f96:	0e 94 65 3f 	call	0x7eca	; 0x7eca <watchdogConfig>
    7f9a:	04 c0       	rjmp	.+8      	; 0x7fa4 <espProgModeInvoke+0xce>
				}
				delay5ms();
			}
			else {
				//delay5ms();
				countOut = NUMBER_OF_RX_EDGES;
    7f9c:	d0 93 01 01 	sts	0x0101, r29	; 0x800101 <__data_start+0x1>
    7fa0:	c0 93 00 01 	sts	0x0100, r28	; 0x800100 <__data_start>
				delay5ms();
    7fa4:	0e 94 3a 3f 	call	0x7e74	; 0x7e74 <delay5ms>
    7fa8:	b0 cf       	rjmp	.-160    	; 0x7f0a <espProgModeInvoke+0x34>
			}
		}
	}
}
    7faa:	df 91       	pop	r29
    7fac:	cf 91       	pop	r28
    7fae:	08 95       	ret

00007fb0 <verifySpace>:
	do getch(); while (--count);
	verifySpace();
}

void verifySpace() {
	if (getch() != CRC_EOP) {
    7fb0:	0e 94 59 3f 	call	0x7eb2	; 0x7eb2 <getch>
    7fb4:	80 32       	cpi	r24, 0x20	; 32
    7fb6:	21 f0       	breq	.+8      	; 0x7fc0 <verifySpace+0x10>
		watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    7fb8:	88 e0       	ldi	r24, 0x08	; 8
    7fba:	0e 94 65 3f 	call	0x7eca	; 0x7eca <watchdogConfig>
    7fbe:	ff cf       	rjmp	.-2      	; 0x7fbe <verifySpace+0xe>
		while (1)			      // and busy-loop so that WD causes
		;				      //  a reset and app start.
	}
	putch(STK_INSYNC);
    7fc0:	84 e1       	ldi	r24, 0x14	; 20
    7fc2:	0c 94 52 3f 	jmp	0x7ea4	; 0x7ea4 <putch>

00007fc6 <getNch>:
	::[count] "M" (UART_B_VALUE)
	);
}
#endif

void getNch(uint8_t count) {
    7fc6:	cf 93       	push	r28
    7fc8:	c8 2f       	mov	r28, r24
	do getch(); while (--count);
    7fca:	0e 94 59 3f 	call	0x7eb2	; 0x7eb2 <getch>
    7fce:	c1 50       	subi	r28, 0x01	; 1
    7fd0:	e1 f7       	brne	.-8      	; 0x7fca <getNch+0x4>
	verifySpace();
}
    7fd2:	cf 91       	pop	r28
}
#endif

void getNch(uint8_t count) {
	do getch(); while (--count);
	verifySpace();
    7fd4:	0c 94 d8 3f 	jmp	0x7fb0	; 0x7fb0 <verifySpace>

00007fd8 <do_spm>:
*   data=0 in WRITE
*/
static void do_spm(uint16_t address, uint8_t command, uint16_t data)  __attribute__ ((used));
static void do_spm(uint16_t address, uint8_t command, uint16_t data) {
	// Do spm stuff
	asm volatile (
    7fd8:	fc 01       	movw	r30, r24
    7fda:	0a 01       	movw	r0, r20
    7fdc:	67 bf       	out	0x37, r22	; 55
    7fde:	e8 95       	spm
    7fe0:	11 24       	eor	r1, r1
	);

	// wait for spm to complete
	//   it doesn't have much sense for __BOOT_PAGE_FILL,
	//   but it doesn't hurt and saves some bytes on 'if'
	boot_spm_busy_wait();
    7fe2:	07 b6       	in	r0, 0x37	; 55
    7fe4:	00 fc       	sbrc	r0, 0
    7fe6:	fd cf       	rjmp	.-6      	; 0x7fe2 <do_spm+0xa>
	#if defined(RWWSRE)
	// this 'if' condition should be: (command == __BOOT_PAGE_WRITE || command == __BOOT_PAGE_ERASE)...
	// but it's tweaked a little assuming that in every command we are interested in here, there
	// must be also SELFPRGEN set. If we skip checking this bit, we save here 4B
	if ((command & (_BV(PGWRT)|_BV(PGERS))) && (data == 0) ) {
    7fe8:	66 70       	andi	r22, 0x06	; 6
    7fea:	29 f0       	breq	.+10     	; 0x7ff6 <do_spm+0x1e>
    7fec:	45 2b       	or	r20, r21
    7fee:	19 f4       	brne	.+6      	; 0x7ff6 <do_spm+0x1e>
		// Reenable read access to flash
		__boot_rww_enable_short();
    7ff0:	81 e1       	ldi	r24, 0x11	; 17
    7ff2:	87 bf       	out	0x37, r24	; 55
    7ff4:	e8 95       	spm
    7ff6:	08 95       	ret

00007ff8 <_exit>:
    7ff8:	f8 94       	cli

00007ffa <__stop_program>:
    7ffa:	ff cf       	rjmp	.-2      	; 0x7ffa <__stop_program>
